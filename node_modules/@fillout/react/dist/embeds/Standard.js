import React, { useState, useEffect } from "react";
import { useFilloutEmbed } from "../embed.js";
import { Loading } from "../components/Loading.js";
export const Standard = ({ filloutId, domain, inheritParameters, parameters, dynamicResize, }) => {
    const [loading, setLoading] = useState(true);
    const embed = useFilloutEmbed({
        filloutId,
        domain,
        inheritParameters,
        parameters,
        dynamicResize,
    });
    // dynamic resize
    const [height, setHeight] = useState();
    useEffect(() => {
        if (dynamicResize && embed) {
            const listener = (event) => {
                try {
                    if (event.origin === new URL(embed.iframeUrl.toString()).origin &&
                        event.data.embedId === embed.embedId &&
                        event.data.type === "form_resized") {
                        const newHeight = event.data.size;
                        if (typeof newHeight === "number") {
                            setHeight(newHeight);
                        }
                    }
                }
                catch (err) { }
            };
            window.addEventListener("message", listener);
            return () => window.removeEventListener("message", listener);
        }
    }, [dynamicResize, embed]);
    return (React.createElement("div", { className: "fillout-standard-embed", style: {
            height: !dynamicResize
                ? "100%"
                : typeof height === "number"
                    ? height
                    : 256,
            transition: dynamicResize ? "height 150ms ease" : undefined,
        } },
        loading && (React.createElement("div", { style: {
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                width: "100%",
                height: "100%",
                minHeight: 256,
            } },
            React.createElement(Loading, null))),
        embed && (React.createElement("iframe", { src: embed.iframeUrl, allow: "microphone; camera; geolocation", title: "Embedded Form", onLoad: () => setLoading(false), style: {
                width: !loading ? "100%" : 0,
                height: !loading ? "100%" : 0,
                opacity: !loading ? 1 : 0,
                borderRadius: 10,
                border: 0,
                minHeight: 256,
            } }))));
};

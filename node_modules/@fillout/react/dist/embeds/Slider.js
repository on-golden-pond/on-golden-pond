import React, { useState } from "react";
import { createPortal } from "react-dom";
import { useFilloutEmbed } from "../embed.js";
import { Loading } from "../components/Loading.js";
// This is exposed as an standalone embed component,
// but can also be used indirectly with SliderButton
export const Slider = ({ filloutId, domain, inheritParameters, parameters, sliderDirection = "right", onClose: _onClose, }) => {
    const [loading, setLoading] = useState(true);
    const embed = useFilloutEmbed({
        filloutId,
        domain,
        inheritParameters,
        parameters,
    });
    const [isOpen, setIsOpen] = useState(true);
    const onClose = () => {
        if (!isOpen)
            return;
        setIsOpen(false);
        setTimeout(_onClose, 250);
    };
    const sliderLeft = sliderDirection === "left";
    const sliderOpen = !loading && isOpen;
    return createPortal(React.createElement(SliderContainer, { isOpen: isOpen, onClose: onClose },
        loading && (React.createElement("div", { style: {
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                width: "100%",
                height: "100%",
            } },
            React.createElement(Loading, null))),
        React.createElement("div", { className: "fillout-embed-slider-main", style: Object.assign({ display: "flex", justifyContent: sliderLeft ? "start" : "end", flexDirection: sliderLeft ? "row" : "row-reverse", alignItems: "center", height: !loading ? "100%" : 0, transitionProperty: sliderLeft ? "left" : "right", transitionDuration: "0.25s", transitionTimingFunction: "ease-in-out" }, (sliderLeft
                ? {
                    left: sliderOpen ? 0 : "-80%",
                }
                : {
                    right: sliderOpen ? 0 : "-80%",
                })) },
            embed && (React.createElement("iframe", { src: embed.iframeUrl, allow: "microphone; camera; geolocation", title: "Embedded Form", className: "fillout-embed-slider-iframe", style: {
                    border: 0,
                    width: !loading ? "80%" : 0,
                    height: !loading ? "100%" : 0,
                    opacity: !loading ? 1 : 0,
                }, onLoad: () => setLoading(false) })),
            !loading && React.createElement(CloseButton, { onClick: onClose, sliderLeft: sliderLeft }))), document.body);
};
const SliderContainer = ({ children, isOpen, onClose, }) => (React.createElement("div", { onClick: onClose, style: {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100%",
        height: "100%",
        background: "rgba(0, 0, 0, 0.65)",
        transition: "opacity 0.25s ease-in-out",
        zIndex: 10000000000000,
        opacity: isOpen ? 1 : 0,
    } }, children));
const CloseButton = ({ onClick, sliderLeft, }) => (React.createElement("button", { onClick: (e) => {
        e.stopPropagation();
        onClick();
    }, className: "fillout-embed-slider-close", style: Object.assign({ border: 0, display: "flex", background: "#171717", color: "white", cursor: "pointer" }, (sliderLeft
        ? {
            borderTopRightRadius: 15,
            borderBottomRightRadius: 15,
        }
        : {
            borderTopLeftRadius: 15,
            borderBottomLeftRadius: 15,
        })) },
    React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor", strokeWidth: "2", style: {
            width: 24,
            height: 24,
        } },
        React.createElement("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }))));
